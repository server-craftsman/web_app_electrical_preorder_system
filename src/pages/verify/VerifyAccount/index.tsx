import React, { useEffect, useState } from 'react';
import { useSearchParams, useNavigate } from 'react-router-dom';
import { message, Spin } from 'antd';
import { AuthService } from '../../../services/auth/auth.service';

const VerifyAccount: React.FC = () => {
  const [searchParams] = useSearchParams();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();

  useEffect(() => {
    console.log('üöÄ Trang VerifyAccount.tsx ƒë∆∞·ª£c t·∫£i!');

    const verifyUser = async () => {
      const token = searchParams.get('token'); // ƒê·ªçc token t·ª´ query string

      if (!token) {
        console.error('üî¥ Kh√¥ng t√¨m th·∫•y token trong URL!');
        setError('Token kh√¥ng h·ª£p l·ªá!');
        setLoading(false);
        return;
      }

      console.log('üîπ Token t·ª´ URL:', token);

      try {
        const response = await AuthService.verifyToken({ token });

        if (response.status === 200) {
          message.success(
            'üéâ X√°c minh th√†nh c√¥ng! Chuy·ªÉn h∆∞·ªõng ƒë·∫øn ƒëƒÉng nh·∫≠p...'
          );
          setTimeout(() => navigate('/login'), 2000);
        } else {
          setError('‚ùå X√°c minh th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.');
        }
      } catch (error) {
        console.error('‚ö†Ô∏è L·ªói khi g·ªçi API x√°c minh:', error);
        setError('L·ªói x√°c minh! Vui l√≤ng th·ª≠ l·∫°i sau.');
      } finally {
        setLoading(false);
      }
    };

    verifyUser();
  }, [searchParams, navigate]);

  return (
    <div className="flex justify-center items-center min-h-screen">
      {loading ? (
        <Spin size="large" />
      ) : error ? (
        <p className="text-red-500">{error}</p>
      ) : (
        <p>X√°c minh t√†i kho·∫£n ho√†n t·∫•t!</p>
      )}
    </div>
  );
};

export default VerifyAccount;
